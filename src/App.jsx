// –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –ê—Ä—Ç—É—Ä–∞ –∏ –í–∞–ª–µ—Ä–∏–∏

import { useState, useEffect, useCallback } from 'react';
import SyncModeSelector from './components/SyncModeSelector.jsx';
import { useFirebase } from './hooks/useFirebase.js';
import { 
  createFamily as createFamilyFirestore, 
  joinFamily as joinFamilyFirestore,
  subscribeToFamilyData,
  subscribeToTransactions,
  subscribeToGoals,
  addTransaction as addTransactionFirestore,
  updateGoal,
  updateFamilyBalances
} from './firebase-service.js';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
const Modal = ({ isOpen, onClose, title, children, theme = 'dark' }) => {
  if (!isOpen) return null;

  const modalBg = theme === 'light' ? 'bg-white border border-gray-200' : 'bg-gray-800';
  const textColor = theme === 'light' ? 'text-gray-800' : 'text-white';
  const textSecondary = theme === 'light' ? 'text-gray-600' : 'text-gray-400';

  const handleBackdropClick = (e) => {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ backdrop, –Ω–µ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  return (
    <div 
      className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4"
      onClick={handleBackdropClick}
    >
      <div className={`${modalBg} rounded-2xl p-6 w-full max-w-md max-h-[90vh] overflow-y-auto`}>
        <div className="flex justify-between items-center mb-4">
          <h3 className={`text-xl font-semibold ${textColor}`}>{title}</h3>
          <button
            onClick={onClose}
            className={`${textSecondary} hover:${textColor} text-2xl`}
          >
            √ó
          </button>
        </div>
        {children}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const Notification = ({ message, type, onClose }) => {
  useEffect(() => {
    const timer = setTimeout(onClose, 5000);
    return () => clearTimeout(timer);
  }, [onClose]);

  const bgColor = type === 'success' ? 'bg-green-600' : type === 'warning' ? 'bg-yellow-600' : 'bg-red-600';
  
  return (
    <div className={`fixed top-4 right-4 ${bgColor} text-white p-4 rounded-lg shadow-lg z-50 max-w-sm`}>
      <div className="flex justify-between items-center">
        <span>{message}</span>
        <button onClick={onClose} className="ml-4 text-xl">√ó</button>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –±–∞–ª–∞–Ω—Å–∞
const BalanceCard = ({ user, balance, color, icon, onEdit, transactions = [], formatCurrency }) => {
  const income = Array.isArray(transactions) ? transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0) : 0;
  const expenses = Array.isArray(transactions) ? transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0) : 0;
  
  return (
    <div 
      className="p-6 rounded-2xl shadow-lg transition-all duration-300 hover:shadow-xl hover:scale-105 cursor-pointer"
      style={{ 
        background: `linear-gradient(135deg, ${color}20 0%, ${color}05 100%)`,
        border: `1px solid ${color}30`
      }}
      onClick={() => onEdit && onEdit(user)}
    >
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-xl font-semibold text-white">{user}</h3>
        <span className="text-2xl">{icon}</span>
      </div>
      <div className="text-3xl font-bold text-white mb-2">
        {formatCurrency ? formatCurrency(balance || 0) : `${(balance || 0).toLocaleString('ru-RU')} z≈Ç`}
      </div>
      <div className="text-sm text-gray-300 mb-2">
        –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç—Ä–∞—Ç
      </div>
      <div className="flex justify-between text-xs text-gray-400">
        <span className="text-green-400">+{formatCurrency ? formatCurrency(income || 0) : `${(income || 0).toLocaleString('ru-RU')} z≈Ç`}</span>
        <span className="text-red-400">-{formatCurrency ? formatCurrency(expenses || 0) : `${(expenses || 0).toLocaleString('ru-RU')} z≈Ç`}</span>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω—é
const Navigation = ({ activeTab, setActiveTab, theme, toggleTheme }) => {
  const menuItems = [
    { id: 'dashboard', label: '–ì–ª–∞–≤–Ω–∞—è', icon: 'üè†' },
    { id: 'transactions', label: '–û–ø–µ—Ä–∞—Ü–∏–∏', icon: 'üí≥' },
    { id: 'goals', label: '–¶–µ–ª–∏', icon: 'üéØ' },
    { id: 'categories', label: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', icon: 'üìÇ' },
    { id: 'analytics', label: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', icon: 'üìä' },
    { id: 'settings', label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', icon: '‚öôÔ∏è' },
  ];

  const navBg = theme === 'light' ? 'bg-white/60 backdrop-blur-sm border border-gray-200' : 'bg-gray-800/50 backdrop-blur-sm';
  const buttonActive = theme === 'light' ? 'bg-blue-500 text-white' : 'bg-blue-600 text-white';
  const buttonInactive = theme === 'light' 
    ? 'bg-gray-100 text-gray-700 hover:bg-gray-200 hover:text-gray-900' 
    : 'bg-gray-700/50 text-gray-300 hover:bg-gray-600/50 hover:text-white';
  const themeButtonStyle = theme === 'light'
    ? 'bg-gray-100 text-gray-700 hover:bg-gray-200 hover:text-gray-900'
    : 'bg-gray-700/50 text-gray-300 hover:bg-gray-600/50 hover:text-white';

  return (
    <nav className={`${navBg} p-3 sm:p-4 rounded-xl mb-6`}>
      <div className="flex flex-col sm:flex-row gap-3 sm:gap-2 items-start sm:items-center">
        <div className="grid grid-cols-3 sm:flex sm:flex-wrap gap-2 flex-1 w-full sm:w-auto">
          {menuItems.map((item) => (
            <button
              key={item.id}
              onClick={() => setActiveTab(item.id)}
              className={`flex flex-col sm:flex-row items-center justify-center sm:justify-start gap-1 sm:gap-2 px-2 sm:px-4 py-3 sm:py-2 rounded-lg transition-all duration-200 text-xs sm:text-sm ${
                activeTab === item.id ? buttonActive : buttonInactive
              }`}
            >
              <span className="text-lg sm:text-base">{item.icon}</span>
              <span className="text-center sm:hidden">{item.label}</span>
              <span className="hidden sm:block">{item.label}</span>
            </button>
          ))}
        </div>
        <div className="hidden sm:block">
          <button
            onClick={toggleTheme}
            className={`${themeButtonStyle} px-3 py-2 rounded-lg transition-all duration-200`}
            title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É"
          >
            {theme === 'dark' ? '‚òÄÔ∏è' : 'üåô'}
          </button>
        </div>
      </div>
    </nav>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ü–µ–ª–∏
const GoalCard = ({ goal, onEdit, onDelete, onAddMoney, formatCurrency }) => {
  const progress = (goal.current / goal.target) * 100;
  
  // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
  const getDeadlineInfo = () => {
    if (!goal.deadline) return null;
    
    const now = new Date();
    const deadline = new Date(goal.deadline);
    const diffTime = deadline - now;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) {
      return { text: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ', color: 'text-red-400', icon: '‚ö†Ô∏è' };
    } else if (diffDays === 0) {
      return { text: '–°–µ–≥–æ–¥–Ω—è!', color: 'text-orange-400', icon: 'üî•' };
    } else if (diffDays <= 7) {
      return { text: `${diffDays} –¥–Ω.`, color: 'text-yellow-400', icon: '‚ö°' };
    } else if (diffDays <= 30) {
      return { text: `${diffDays} –¥–Ω.`, color: 'text-blue-400', icon: 'üìÖ' };
    } else {
      return { text: `${diffDays} –¥–Ω.`, color: 'text-gray-400', icon: 'üìÖ' };
    }
  };

  const deadlineInfo = getDeadlineInfo();
  
  return (
    <div className="bg-gray-800/50 backdrop-blur-sm p-6 rounded-xl">
      <div className="flex justify-between items-start mb-3">
        <div className="flex-1">
          <h4 className="text-lg font-semibold text-white">{goal.title}</h4>
          {goal.deadline && deadlineInfo && (
            <div className={`text-xs ${deadlineInfo.color} mt-1 flex items-center gap-1`}>
              <span>{deadlineInfo.icon}</span>
              <span>–î–µ–¥–ª–∞–π–Ω: {deadlineInfo.text}</span>
            </div>
          )}
        </div>
        <div className="flex gap-2">
          <button
            onClick={() => onAddMoney(goal)}
            className="text-green-400 hover:text-green-300 text-sm"
            title="–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏"
          >
            üí∞
          </button>
          <button
            onClick={() => onEdit(goal)}
            className="text-blue-400 hover:text-blue-300 text-sm"
            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
          >
            ‚úèÔ∏è
          </button>
          <button
            onClick={() => onDelete(goal.id)}
            className="text-red-400 hover:text-red-300 text-sm"
            title="–£–¥–∞–ª–∏—Ç—å"
          >
            üóëÔ∏è
          </button>
        </div>
      </div>
      <div className="flex justify-between text-sm text-gray-300 mb-2">
        <span>{formatCurrency ? formatCurrency(goal.current || 0) : `${(goal.current || 0).toLocaleString('ru-RU')} z≈Ç`}</span>
        <span>{formatCurrency ? formatCurrency(goal.target || 0) : `${(goal.target || 0).toLocaleString('ru-RU')} z≈Ç`}</span>
      </div>
      <div className="w-full bg-gray-700 rounded-full h-3 mb-2">
        <div 
          className="h-3 rounded-full transition-all duration-500"
          style={{ 
            width: `${Math.min(progress, 100)}%`,
            background: `linear-gradient(90deg, ${goal.color} 0%, ${goal.color}80 100%)`
          }}
        />
      </div>
      <div className="flex justify-between items-center text-xs text-gray-400">
        <span>{progress.toFixed(0)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</span>
        <span>–û—Å—Ç–∞–ª–æ—Å—å: {((goal.target || 0) - (goal.current || 0)).toLocaleString('ru-RU')} z≈Ç</span>
      </div>
    </div>
  );
};

// –ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
// const SimpleChart = ({ data, title }) => {
//   const maxValue = Math.max(...data.map(d => d.value));
//   
//   return (
//     <div className="bg-gray-800/50 backdrop-blur-sm p-6 rounded-xl">
//       <h4 className="text-lg font-semibold text-white mb-4">{title}</h4>
//       <div className="space-y-3">
//         {data.map((item, index) => (
//           <div key={index} className="flex items-center gap-3">
//             <div className="w-20 text-sm text-gray-300 text-right">{item.name}</div>
//             <div className="flex-1 bg-gray-700 rounded-full h-4 relative">
//               <div
//                 className="h-4 rounded-full transition-all duration-500"
//                 style={{
//                   width: `${(item.value / maxValue) * 100}%`,
//                   backgroundColor: item.color || '#3b82f6'
//                 }}
//               />
//               <span className="absolute right-2 top-0 h-4 flex items-center text-xs text-white font-medium">
//                 {item.value.toLocaleString('ru-RU')} z≈Ç
//               </span>
//             </div>
//           </div>
//         ))}
//       </div>
//     </div>
//   );
// };

// –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
const PieChart = ({ data, title, formatCurrency }) => {
  const total = data.reduce((sum, item) => sum + item.value, 0);
  
  return (
    <div className="bg-gray-800/50 backdrop-blur-sm p-6 rounded-xl">
      <h4 className="text-lg font-semibold text-white mb-4">{title}</h4>
      <div className="space-y-3">
        {data.map((item, index) => {
          const percentage = total > 0 ? (item.value / total * 100) : 0;
          return (
            <div key={index} className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div 
                  className="w-4 h-4 rounded-full" 
                  style={{ backgroundColor: item.color }}
                />
                <span className="text-gray-300">{item.name}</span>
              </div>
              <div className="text-right">
                <div className="text-white font-medium">
                  {formatCurrency ? formatCurrency(item.value || 0) : `${(item.value || 0).toLocaleString('ru-RU')} z≈Ç`}
                </div>
                <div className="text-xs text-gray-400">{percentage.toFixed(1)}%</div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

// –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π (–ø–æ –º–µ—Å—è—Ü–∞–º)
const TrendChart = ({ transactions, formatCurrency, title = "–¢–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤" }) => {
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
  const monthlyData = {};
  
  transactions.forEach(transaction => {
    if (transaction.type === 'expense') {
      const month = transaction.date.toLocaleDateString('ru-RU', { 
        year: 'numeric', 
        month: 'long' 
      });
      monthlyData[month] = (monthlyData[month] || 0) + transaction.amount;
    }
  });

  const chartData = Object.entries(monthlyData)
    .map(([month, amount]) => ({ name: month, value: amount }))
    .slice(-6); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤

  const maxValue = Math.max(...chartData.map(d => d.value), 1);

  return (
    <div className="bg-gray-800/50 backdrop-blur-sm p-6 rounded-xl">
      <h4 className="text-lg font-semibold text-white mb-4">{title}</h4>
      <div className="space-y-3">
        {chartData.map((item, index) => (
          <div key={index} className="flex items-center gap-3">
            <div className="w-24 text-sm text-gray-300 text-right">{item.name}</div>
            <div className="flex-1 bg-gray-700 rounded-full h-4 relative">
              <div
                className="h-4 rounded-full transition-all duration-500 bg-gradient-to-r from-red-500 to-red-400"
                style={{
                  width: `${(item.value / maxValue) * 100}%`
                }}
              />
              <span className="absolute right-2 top-0 h-4 flex items-center text-xs text-white font-medium">
                {formatCurrency ? formatCurrency(item.value || 0) : `${(item.value || 0).toLocaleString('ru-RU')} z≈Ç`}
              </span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function App() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  console.log('üöÄ Budget App v2.2.5 - FIXED toLocaleString errors!');
  
  // Firebase hook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const { isConnected: firebaseConnected, error: firebaseError, isEnabled: firebaseEnabled } = useFirebase();
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const safeFilterTransactions = (transactions, filterFn) => {
    return Array.isArray(transactions) ? transactions.filter(filterFn) : [];
  };
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
  const saveToLocalStorage = (key, data) => {
    try {
      localStorage.setItem(key, JSON.stringify(data));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
    }
  };

  const loadFromLocalStorage = (key, defaultValue) => {
    try {
      const saved = localStorage.getItem(key);
      if (saved) {
        const parsed = JSON.parse(saved);
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if (key === 'familyBudget_transactions' && Array.isArray(parsed)) {
          return parsed.map(t => ({
            ...t,
            date: new Date(t.date)
          }));
        }
        return parsed;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', error);
    }
    return defaultValue;
  };

  const [activeTab, setActiveTab] = useState('dashboard');
  const [theme, setTheme] = useState(() => loadFromLocalStorage('familyBudget_theme', 'dark'));
  const [notification, setNotification] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [modalType, setModalType] = useState('');
  const [editingItem, setEditingItem] = useState(null);
  const [selectedUser, setSelectedUser] = useState('');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑ localStorage
  const [balances, setBalances] = useState(() => 
    loadFromLocalStorage('familyBudget_balances', {
      arthur: 2450,
      valeria: 1890,
      shared: 5670
    })
  );

  const [transactions, setTransactions] = useState(() =>
    loadFromLocalStorage('familyBudget_transactions', [
      { id: 1, user: 'arthur', type: 'income', amount: 3000, description: '–ó–∞—Ä–ø–ª–∞—Ç–∞', category: '–†–∞–±–æ—Ç–∞', date: new Date() },
      { id: 2, user: 'valeria', type: 'income', amount: 2500, description: '–ó–∞—Ä–ø–ª–∞—Ç–∞', category: '–†–∞–±–æ—Ç–∞', date: new Date() },
      { id: 3, user: 'shared', type: 'expense', amount: 890, description: '–ü—Ä–æ–¥—É–∫—Ç—ã', category: '–ü—Ä–æ–¥—É–∫—Ç—ã', date: new Date() },
      { id: 4, user: 'arthur', type: 'expense', amount: 320, description: '–ú–µ—Ç—Ä–æ', category: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', date: new Date() },
      { id: 5, user: 'valeria', type: 'expense', amount: 280, description: '–ö–∏–Ω–æ', category: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', date: new Date() }
    ])
  );

  const [goals, setGoals] = useState(() =>
    loadFromLocalStorage('familyBudget_goals', [
      { 
        id: 1, 
        title: '–û—Ç–ø—É—Å–∫ –≤ –ò—Ç–∞–ª–∏—é', 
        current: 3200, 
        target: 8000, 
        color: '#10b981',
        deadline: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] // 3 –º–µ—Å—è—Ü–∞
      },
      { 
        id: 2, 
        title: '–ù–æ–≤—ã–π –Ω–æ—É—Ç–±—É–∫', 
        current: 1500, 
        target: 4000, 
        color: '#3b82f6',
        deadline: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] // 2 –º–µ—Å—è—Ü–∞
      },
      { 
        id: 3, 
        title: '–†–µ–º–æ–Ω—Ç –∫—É—Ö–Ω–∏', 
        current: 850, 
        target: 15000, 
        color: '#f59e0b',
        deadline: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] // 1 –≥–æ–¥
      }
    ])
  );

  const [categories, setCategories] = useState(() =>
    loadFromLocalStorage('familyBudget_categories', [
      { id: 1, name: '–ü—Ä–æ–¥—É–∫—Ç—ã', limit: 1200, color: '#ef4444' },
      { id: 2, name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', limit: 500, color: '#3b82f6' },
      { id: 3, name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', limit: 600, color: '#8b5cf6' },
      { id: 4, name: '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ', limit: 600, color: '#f59e0b' },
      { id: 5, name: '–†–∞–±–æ—Ç–∞', limit: 0, color: '#10b981' }
    ])
  );

  const [exchangeRates, setExchangeRates] = useState(() =>
    loadFromLocalStorage('familyBudget_exchangeRates', {
      EUR: 4.65,
      USD: 4.28,
      UAH: 0.103,
      PLN: 1.00
    })
  );
  const [lastRateUpdate, setLastRateUpdate] = useState(null);
  const [isLoadingRates, setIsLoadingRates] = useState(false);
  const [deferredPrompt, setDeferredPrompt] = useState(null);
  const [showInstallPrompt, setShowInstallPrompt] = useState(false);
  const [familyCode, setFamilyCode] = useState(() => loadFromLocalStorage('familyCode', null));
  const [isConnectedToFamily, setIsConnectedToFamily] = useState(() => loadFromLocalStorage('isConnectedToFamily', false));
  const [userName, setUserName] = useState(() => loadFromLocalStorage('userName', ''));
  const [familyId, setFamilyId] = useState(() => {
    const id = loadFromLocalStorage('familyId', null);
    console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è familyId:', id);
    return id;
  });
  const [syncMode, setSyncMode] = useState(() => {
    const mode = loadFromLocalStorage('syncMode', 'local');
    console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è syncMode:', mode);
    return mode;
  });

  const [selectedCurrency, setSelectedCurrency] = useState('PLN');

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
  useEffect(() => {
    saveToLocalStorage('familyBudget_theme', theme);
  }, [theme]);

  useEffect(() => {
    saveToLocalStorage('familyBudget_balances', balances);
  }, [balances]);

  useEffect(() => {
    saveToLocalStorage('familyBudget_transactions', transactions);
  }, [transactions]);

  useEffect(() => {
    saveToLocalStorage('familyBudget_goals', goals);
  }, [goals]);

  useEffect(() => {
    saveToLocalStorage('familyBudget_categories', categories);
  }, [categories]);

  useEffect(() => {
    saveToLocalStorage('familyBudget_exchangeRates', exchangeRates);
  }, [exchangeRates]);

  useEffect(() => {
    console.log('üìù familyId –∏–∑–º–µ–Ω–∏–ª—Å—è:', familyId);
    saveToLocalStorage('familyId', familyId);
  }, [familyId]);

  useEffect(() => {
    console.log('üìù syncMode –∏–∑–º–µ–Ω–∏–ª—Å—è:', syncMode);
    saveToLocalStorage('syncMode', syncMode);
  }, [syncMode]);

  // PWA —É—Å—Ç–∞–Ω–æ–≤–∫–∞
  useEffect(() => {
    const handleBeforeInstallPrompt = (e) => {
      e.preventDefault();
      setDeferredPrompt(e);
      setShowInstallPrompt(true);
    };

    const handleAppInstalled = () => {
      setShowInstallPrompt(false);
      setDeferredPrompt(null);
      showNotification('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! üéâ', 'success');
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.addEventListener('appinstalled', handleAppInstalled);

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('appinstalled', handleAppInstalled);
    };
  }, []);

  // Firebase –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π Firebase –ø–æ–¥–ø–∏—Å–æ–∫:', {
      familyId: familyId,
      syncMode: syncMode,
      condition: !familyId || (syncMode !== 'cloud' && syncMode !== 'firebase'),
      shouldReturn: !familyId || (syncMode !== 'cloud' && syncMode !== 'firebase')
    });
    
    if (!familyId || (syncMode !== 'cloud' && syncMode !== 'firebase')) {
      console.log('‚ùå Firebase –ø–æ–¥–ø–∏—Å–∫–∏ –ù–ï –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:', { familyId, syncMode });
      return;
    }
    
    console.log('‚úÖ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º Firebase –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è familyId:', familyId);

    const unsubscribeTransactions = subscribeToTransactions(familyId, (result) => {
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ Firebase:', result);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ result —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      if (result.success && Array.isArray(result.transactions)) {
        setTransactions(result.transactions);
        console.log('üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!', result.transactions.length);
      } else {
        console.warn('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ Firebase –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ:', result);
        setTransactions([]);
      }
    });

    const unsubscribeGoals = subscribeToGoals(familyId, (result) => {
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ —Ü–µ–ª–∏ –∏–∑ Firebase:', result);
      if (result.success && Array.isArray(result.goals)) {
        setGoals(result.goals);
        console.log('üéØ –¶–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!', result.goals.length);
      } else {
        console.warn('–¶–µ–ª–∏ –∏–∑ Firebase –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ:', result);
        setGoals([]);
      }
    });

    const unsubscribeFamilyData = subscribeToFamilyData(familyId, (result) => {
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ–º—å–∏ –∏–∑ Firebase:', result);
      if (result.success && result.family) {
        console.log('üîÑ –î–∞–Ω–Ω—ã–µ —Å–µ–º—å–∏:', result.family);
        if (result.family.balances) {
          console.log('üí∞ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ Firebase:', result.family.balances);
          setBalances(result.family.balances);
        }
      } else {
        console.warn('–î–∞–Ω–Ω—ã–µ —Å–µ–º—å–∏ –∏–∑ Firebase –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã:', result);
      }
    });

    return () => {
      unsubscribeTransactions?.();
      unsubscribeGoals?.();
      unsubscribeFamilyData?.();
    };
  }, [familyId, syncMode]);

  const handleInstallClick = async () => {
    if (!deferredPrompt) return;

    deferredPrompt.prompt();
    const { outcome } = await deferredPrompt.userChoice;
    
    if (outcome === 'accepted') {
      showNotification('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...', 'success');
    }
    
    setDeferredPrompt(null);
    setShowInstallPrompt(false);
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ —Å–µ–º—å–∏
  const generateFamilyCode = () => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let result = '';
    for (let i = 0; i < 8; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ–º—å–∏
  const createFamily = async (name) => {
    const newFamilyCode = generateFamilyCode();
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º—å–∏:', { newFamilyCode, name });
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Å–µ–º—å—é –≤ Firebase
      console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Firebase...');
      const result = await createFamilyFirestore(newFamilyCode, name, name);
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Firebase:', result);
      
      if (result.success) {
        setFamilyCode(newFamilyCode);
        setFamilyId(newFamilyCode); // –ò—Å–ø–æ–ª—å–∑—É–µ–º familyCode –∫–∞–∫ ID
        setUserName(name);
        setIsConnectedToFamily(true);
        setSyncMode('firebase');
        
        saveToLocalStorage('familyCode', newFamilyCode);
        saveToLocalStorage('familyId', newFamilyCode);
        saveToLocalStorage('userName', name);
        saveToLocalStorage('isConnectedToFamily', true);
        saveToLocalStorage('syncMode', 'firebase');
        
        console.log('‚úÖ –°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', { familyCode: newFamilyCode, familyId: newFamilyCode, syncMode: 'firebase' });
        showNotification(`–°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞ –≤ Firebase! –ö–æ–¥: ${newFamilyCode}`, 'success');
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏ –≤ Firebase:', error);
      // –û—Ç–∫–∞—Ç –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—É
      setFamilyCode(newFamilyCode);
      setUserName(name);
      setIsConnectedToFamily(true);
      saveToLocalStorage('familyCode', newFamilyCode);
      saveToLocalStorage('userName', name);
      saveToLocalStorage('isConnectedToFamily', true);
      showNotification(`–°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ! –ö–æ–¥: ${newFamilyCode}`, 'warning');
    }
  };

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ–º—å–µ
  const joinFamily = async (code, name) => {
    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ–º—å–µ –≤ Firebase
      const result = await joinFamilyFirestore(code.toUpperCase(), name);
      
      if (result.success) {
        setFamilyCode(code.toUpperCase());
        setFamilyId(code.toUpperCase()); // –ò—Å–ø–æ–ª—å–∑—É–µ–º familyCode –∫–∞–∫ ID
        setUserName(name);
        setIsConnectedToFamily(true);
        setSyncMode('firebase');
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
        if (result.family.balances) {
          setBalances(result.family.balances);
        }
        
        saveToLocalStorage('familyCode', code.toUpperCase());
        saveToLocalStorage('familyId', code.toUpperCase());
        saveToLocalStorage('userName', name);
        saveToLocalStorage('isConnectedToFamily', true);
        saveToLocalStorage('syncMode', 'firebase');
        
        showNotification(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ–º—å–µ ${code.toUpperCase()} —É—Å–ø–µ—à–Ω–æ!`, 'success');
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ–º—å–µ –≤ Firebase:', error);
      // –û—Ç–∫–∞—Ç –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—É
      setFamilyCode(code.toUpperCase());
      setUserName(name);
      setIsConnectedToFamily(true);
      saveToLocalStorage('familyCode', code.toUpperCase());
      saveToLocalStorage('userName', name);
      saveToLocalStorage('isConnectedToFamily', true);
      showNotification(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ–º—å–µ ${code.toUpperCase()} (–ª–æ–∫–∞–ª—å–Ω–æ)`, 'warning');
    }
  };

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ–º—å–∏
  const disconnectFamily = () => {
    setFamilyCode(null);
    setFamilyId(null);
    setUserName('');
    setIsConnectedToFamily(false);
    setSyncMode('local');
    saveToLocalStorage('familyCode', null);
    saveToLocalStorage('familyId', null);
    saveToLocalStorage('userName', '');
    saveToLocalStorage('isConnectedToFamily', false);
    saveToLocalStorage('syncMode', 'local');
    showNotification('–û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ–º—å–∏', 'success');
  };

  // const currencySymbols = {
  //   PLN: 'z≈Ç',
  //   EUR: '‚Ç¨',
  //   USD: '$',
  //   UAH: '‚Ç¥'
  // };

  // const convertAmount = (amount, toCurrency = selectedCurrency) => {
  //   if (toCurrency === 'PLN') return amount;
  //   return amount / exchangeRates[toCurrency];
  // };

  const formatCurrency = useCallback((amount, currency = selectedCurrency) => {
    const convertedAmount = currency === 'PLN' ? amount : amount / exchangeRates[currency];
    const symbols = { PLN: 'z≈Ç', EUR: '‚Ç¨', USD: '$', UAH: '‚Ç¥' };
    return `${convertedAmount.toLocaleString('ru-RU', { maximumFractionDigits: 2 })} ${symbols[currency]}`;
  }, [selectedCurrency, exchangeRates]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ —Ç–µ–º (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
  // const getThemeClasses = () => ({
  //   cardBg: theme === 'light' 
  //     ? 'bg-white/80 backdrop-blur-sm shadow-lg border border-gray-200' 
  //     : 'bg-gray-800/50 backdrop-blur-sm',
  //   text: theme === 'light' ? 'text-gray-800' : 'text-white',
  //   textSecondary: theme === 'light' ? 'text-gray-600' : 'text-gray-300',
  //   textMuted: theme === 'light' ? 'text-gray-500' : 'text-gray-400',
  //   input: theme === 'light' 
  //     ? 'bg-gray-50 border border-gray-300 text-gray-800' 
  //     : 'bg-gray-700 text-white',
  //   button: theme === 'light'
  //     ? 'bg-blue-500 hover:bg-blue-600 text-white'
  //     : 'bg-blue-600 hover:bg-blue-700 text-white'
  // });

  // const themeClasses = getThemeClasses();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
  const fetchExchangeRates = async () => {
    setIsLoadingRates(true);
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API exchangerate-api.com
      const response = await fetch('https://api.exchangerate-api.com/v4/latest/PLN');
      const data = await response.json();
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç PLN –∫ –¥—Ä—É–≥–∏–º –≤–∞–ª—é—Ç–∞–º
      const newRates = {
        PLN: 1.00,
        EUR: 1 / data.rates.EUR, // –°–∫–æ–ª—å–∫–æ PLN –∑–∞ 1 EUR
        USD: 1 / data.rates.USD, // –°–∫–æ–ª—å–∫–æ PLN –∑–∞ 1 USD  
        UAH: 1 / data.rates.UAH  // –°–∫–æ–ª—å–∫–æ PLN –∑–∞ 1 UAH
      };
      
      setExchangeRates(newRates);
      setLastRateUpdate(new Date());
      showNotification('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error);
      showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç', 'error');
    }
    setIsLoadingRates(false);
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    const loadRates = async () => {
      setIsLoadingRates(true);
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API exchangerate-api.com
        const response = await fetch('https://api.exchangerate-api.com/v4/latest/PLN');
        const data = await response.json();
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç PLN –∫ –¥—Ä—É–≥–∏–º –≤–∞–ª—é—Ç–∞–º
        const newRates = {
          PLN: 1.00,
          EUR: 1 / data.rates.EUR, // –°–∫–æ–ª—å–∫–æ PLN –∑–∞ 1 EUR
          USD: 1 / data.rates.USD, // –°–∫–æ–ª—å–∫–æ PLN –∑–∞ 1 USD  
          UAH: 1 / data.rates.UAH  // –°–∫–æ–ª—å–∫–æ PLN –∑–∞ 1 UAH
        };
        
        setExchangeRates(newRates);
        setLastRateUpdate(new Date());
        showNotification('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç', 'error');
      }
      setIsLoadingRates(false);
    };
    
    loadRates();
  }, []);

  // –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ª–∏–º–∏—Ç–∞—Ö
  useEffect(() => {
    const checkLimitsAndNotify = () => {
      const currentDate = new Date();
      const monthKey = `${currentDate.getFullYear()}-${currentDate.getMonth()}`;
      const lastCheck = localStorage.getItem(`lastLimitCheck_${monthKey}`);
      const now = currentDate.toISOString();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
      if (lastCheck && (new Date(now) - new Date(lastCheck)) < 3600000) {
        return;
      }

      categories.forEach(category => {
        if (category.limit === 0) return;
        
        // –¢—Ä–∞—Ç—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
        const monthlySpent = transactions
          .filter(t => {
            const tDate = new Date(t.date);
            return t.category === category.name && 
                   t.type === 'expense' &&
                   tDate.getMonth() === currentDate.getMonth() &&
                   tDate.getFullYear() === currentDate.getFullYear();
          })
          .reduce((sum, t) => sum + t.amount, 0);

        const percentage = (monthlySpent / category.limit) * 100;
        
        // –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
        if (percentage >= 100) {
          showNotification(
            `üö® –õ–∏–º–∏—Ç "${category.name}" –ø—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ ${(percentage - 100).toFixed(1)}%! (${formatCurrency(monthlySpent)} –∏–∑ ${formatCurrency(category.limit)})`,
            'error'
          );
        } else if (percentage >= 90) {
          showNotification(
            `‚ö†Ô∏è –ü–æ—á—Ç–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç "${category.name}": ${percentage.toFixed(1)}% (–æ—Å—Ç–∞–ª–æ—Å—å ${formatCurrency(category.limit - monthlySpent)})`,
            'warning'
          );
        } else if (percentage >= 75) {
          showNotification(
            `üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${percentage.toFixed(1)}% –ª–∏–º–∏—Ç–∞ "${category.name}" (–æ—Å—Ç–∞–ª–æ—Å—å ${formatCurrency(category.limit - monthlySpent)})`,
            'warning'
          );
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è –¥–µ–¥–ª–∞–π–Ω—ã —Ü–µ–ª–µ–π
      goals.forEach(goal => {
        if (!goal.deadline) return;
        
        const deadline = new Date(goal.deadline);
        const daysLeft = Math.ceil((deadline - currentDate) / (1000 * 60 * 60 * 24));
        const progress = (goal.current / goal.target) * 100;
        
        if (daysLeft <= 7 && daysLeft > 0 && progress < 80) {
          showNotification(
            `üéØ –¶–µ–ª—å "${goal.title}" –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω. –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.toFixed(1)}%`,
            'warning'
          );
        } else if (daysLeft <= 0 && progress < 100) {
          showNotification(
            `‚è∞ –î–µ–¥–ª–∞–π–Ω —Ü–µ–ª–∏ "${goal.title}" –∏—Å—Ç—ë–∫! –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ: ${progress.toFixed(1)}%`,
            'error'
          );
        }
      });

      // –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
      const monthlyExpenses = transactions
        .filter(t => {
          const tDate = new Date(t.date);
          return t.type === 'expense' &&
                 tDate.getMonth() === currentDate.getMonth() &&
                 tDate.getFullYear() === currentDate.getFullYear();
        })
        .reduce((sum, t) => sum + t.amount, 0);

      const dayOfMonth = currentDate.getDate();
      const totalDaysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();
      const projectedMonthlyExpenses = (monthlyExpenses / dayOfMonth) * totalDaysInMonth;
      
      const totalBalance = Object.values(balances).reduce((sum, balance) => sum + balance, 0);
      
      if (projectedMonthlyExpenses > totalBalance && dayOfMonth > 15) {
        showNotification(
          `üí∏ –ü—Ä–æ–≥–Ω–æ–∑: —Ç—Ä–∞—Ç—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –º–æ–≥—É—Ç –ø—Ä–µ–≤—ã—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ ${formatCurrency(projectedMonthlyExpenses - totalBalance)}`,
          'error'
        );
      }

      localStorage.setItem(`lastLimitCheck_${monthKey}`, now);
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    checkLimitsAndNotify();
  }, [transactions, categories, goals, balances, formatCurrency]);

  const showNotification = (message, type) => {
    setNotification({ message, type });
  };

  const toggleTheme = () => {
    setTheme(theme === 'dark' ? 'light' : 'dark');
    showNotification(`–¢–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ ${theme === 'dark' ? '—Å–≤–µ—Ç–ª—É—é' : '—Ç—ë–º–Ω—É—é'}`, 'success');
  };

  const balanceData = {
    arthur: { balance: balances.arthur, color: '#8b5cf6', icon: 'üíú' },
    valeria: { balance: balances.valeria, color: '#ec4899', icon: 'üíñ' },
    shared: { balance: balances.shared, color: '#f59e0b', icon: 'üß°' }
  };

  const getUserTransactions = (user) => Array.isArray(transactions) ? transactions.filter(t => t.user === user) : [];

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
  const addTransaction = async (formData) => {
    const amount = parseFloat(formData.get('amount'));
    const description = formData.get('description') || formData.get('category');
    const newTransaction = {
      id: Date.now(),
      user: formData.get('user'),
      type: formData.get('type'),
      amount: amount,
      description: description,
      category: formData.get('category'),
      date: new Date()
    };
    
    // –ï—Å–ª–∏ —Å–µ–º—å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π Firebase:', { familyId, syncMode, condition: familyId && (syncMode === 'cloud' || syncMode === 'firebase') });
    if (familyId && (syncMode === 'cloud' || syncMode === 'firebase')) {
      try {
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ Firebase:', { familyId, newTransaction });
        await addTransactionFirestore(familyId, newTransaction);
        console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Firebase');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firebase:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        setTransactions(prev => [...prev, newTransaction]);
      }
    } else {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (Firebase –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω)');
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      setTransactions(prev => [...prev, newTransaction]);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ª–æ–∫–∞–ª—å–Ω–æ (Firebase –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    if (newTransaction.type === 'income') {
      setBalances(prev => ({
        ...prev,
        [newTransaction.user]: prev[newTransaction.user] + amount
      }));
    } else {
      setBalances(prev => ({
        ...prev,
        [newTransaction.user]: prev[newTransaction.user] - amount
      }));
    }
    
    // –ï—Å–ª–∏ —Å–µ–º—å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ Firebase
    if (familyId && (syncMode === 'cloud' || syncMode === 'firebase')) {
      try {
        const newBalance = newTransaction.type === 'income' 
          ? balances[newTransaction.user] + amount 
          : balances[newTransaction.user] - amount;
        
        const updatedBalances = {
          ...balances,
          [newTransaction.user]: newBalance
        };
        
        console.log('üí∞ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ Firebase:', {
          user: newTransaction.user,
          oldBalance: balances[newTransaction.user],
          amount: amount,
          type: newTransaction.type,
          newBalance: newBalance,
          fullBalances: updatedBalances
        });
        
        const result = await updateFamilyBalances(familyId, updatedBalances);
        
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ Firebase:', result);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ Firebase:', error);
      }
    }
    
    showNotification('–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success');
    setModalOpen(false);
    setSelectedUser('');
  };

  const deleteTransaction = (transactionId) => {
    const transaction = transactions.find(t => t.id === transactionId);
    if (!transaction) return;
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é "${transaction.description}" –Ω–∞ —Å—É–º–º—É ${transaction.amount} z≈Ç?`)) {
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏)
    if (transaction.type === 'income') {
      setBalances(prev => ({
        ...prev,
        [transaction.user]: prev[transaction.user] - transaction.amount
      }));
    } else {
      setBalances(prev => ({
        ...prev,
        [transaction.user]: prev[transaction.user] + transaction.amount
      }));
    }
    
    // –£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    setTransactions(prev => prev.filter(t => t.id !== transactionId));
    showNotification('–û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!', 'success');
  };

  const addGoal = (formData) => {
    const newGoal = {
      id: Date.now(),
      title: formData.get('title'),
      target: parseFloat(formData.get('target')),
      current: 0,
      color: '#3b82f6',
      deadline: formData.get('deadline') || null
    };
    setGoals(prev => [...prev, newGoal]);
    showNotification('–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success');
    setModalOpen(false);
    setSelectedUser('');
  };

  const addMoneyToGoal = (goalId, amount) => {
    setGoals(prev => prev.map(goal => 
      goal.id === goalId 
        ? { ...goal, current: Math.min(goal.current + amount, goal.target) }
        : goal
    ));
    showNotification('–î–µ–Ω—å–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Ü–µ–ª–∏!', 'success');
    setModalOpen(false);
    setSelectedUser('');
  };

  const deleteGoal = (goalId) => {
    setGoals(prev => prev.filter(g => g.id !== goalId));
    showNotification('–¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞!', 'success');
  };

  const editCategoryLimit = (categoryId, newLimit) => {
    setCategories(prev => prev.map(cat => 
      cat.id === categoryId 
        ? { ...cat, limit: parseFloat(newLimit) || 0 }
        : cat
    ));
    showNotification('–õ–∏–º–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª—ë–Ω!', 'success');
    setModalOpen(false);
    setSelectedUser('');
  };

  const addCategory = (formData) => {
    const colors = ['#ef4444', '#3b82f6', '#8b5cf6', '#f59e0b', '#10b981', '#06b6d4'];
    const newCategory = {
      id: Date.now(),
      name: formData.get('name'),
      limit: parseFloat(formData.get('limit')) || 0,
      color: colors[Math.floor(Math.random() * colors.length)]
    };
    setCategories(prev => [...prev, newCategory]);
    showNotification('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success');
    setModalOpen(false);
    setSelectedUser('');
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  const getAnalyticsData = () => {
    const expensesByCategory = categories.map(category => {
      const spent = transactions
        .filter(t => t.category === category.name && t.type === 'expense')
        .reduce((sum, t) => sum + t.amount, 0);
      return {
        name: category.name,
        value: spent,
        color: category.color
      };
    }).filter(item => item.value > 0);

    const incomeByUser = [
      { 
        name: '–ê—Ä—Ç—É—Ä', 
        value: Array.isArray(transactions) ? transactions.filter(t => t.user === 'arthur' && t.type === 'income').reduce((sum, t) => sum + t.amount, 0) : 0, 
        color: '#8b5cf6' 
      },
      { 
        name: '–í–∞–ª–µ—Ä–∏—è', 
        value: Array.isArray(transactions) ? transactions.filter(t => t.user === 'valeria' && t.type === 'income').reduce((sum, t) => sum + t.amount, 0) : 0, 
        color: '#ec4899' 
      }
    ].filter(item => item.value > 0);

    return { expensesByCategory, incomeByUser };
  };

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
  const renderContent = () => {
    const { expensesByCategory, incomeByUser } = getAnalyticsData();

    switch (activeTab) {
      case 'transactions':
        return (
          <div className="space-y-6">
            <div className="flex flex-col sm:flex-row gap-4 sm:gap-0 sm:justify-between sm:items-center">
              <h2 className="text-3xl font-bold text-white">üí≥ –û–ø–µ—Ä–∞—Ü–∏–∏</h2>
              <button
                onClick={() => setModalOpen(true) || setModalType('transaction')}
                className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg transition-colors text-center"
              >
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
              </button>
            </div>
            
            <div className="space-y-3">
              {transactions.slice(-10).reverse().map(transaction => (
                <div key={transaction.id} className="bg-gray-800/50 backdrop-blur-sm p-4 rounded-xl">
                  {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ */}
                  <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3 sm:gap-4">
                    <div className="flex-1 min-w-0">
                      <div className="text-white font-medium truncate">{transaction.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</div>
                      <div className="text-sm text-gray-400 mt-1">
                        <span className="inline-block">{transaction.user}</span>
                        <span className="mx-2 hidden sm:inline">‚Ä¢</span>
                        <span className="block sm:inline">{transaction.category}</span>
                        <span className="mx-2 hidden sm:inline">‚Ä¢</span>
                        <span className="block sm:inline text-xs sm:text-sm">{transaction.date.toLocaleDateString('ru-RU')}</span>
                      </div>
                    </div>
                    <div className="flex justify-between sm:justify-end items-center gap-4">
                      <div className={`text-xl sm:text-lg font-bold ${transaction.type === 'income' ? 'text-green-400' : 'text-red-400'}`}>
                        {transaction.type === 'income' ? '+' : '-'}{formatCurrency(transaction.amount)}
                      </div>
                      <button
                        onClick={() => deleteTransaction(transaction.id)}
                        className="text-red-400 hover:text-red-300 p-2 rounded-lg hover:bg-red-900/20 transition-colors"
                        title="–£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>
                </div>
              ))}
              
              {transactions.length === 0 && (
                <div className="text-center py-12 text-gray-400">
                  <div className="text-4xl mb-4">üí≠</div>
                  <div>–ü–æ–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç</div>
                  <div className="text-sm mt-2">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é!</div>
                </div>
              )}
            </div>
          </div>
        );

      case 'goals':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-3xl font-bold text-white">üéØ –ù–∞—à–∏ —Ü–µ–ª–∏</h2>
              <button
                onClick={() => setModalOpen(true) || setModalType('goal')}
                className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors"
              >
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å
              </button>
            </div>
            <div className="grid gap-6">
              {goals.map(goal => (
                <GoalCard 
                  key={goal.id} 
                  goal={goal}
                  onEdit={(goal) => setEditingItem(goal) || setModalType('editGoal') || setModalOpen(true)}
                  onDelete={deleteGoal}
                  onAddMoney={(goal) => setEditingItem(goal) || setModalType('addMoney') || setModalOpen(true)}
                  formatCurrency={formatCurrency}
                />
              ))}
            </div>
          </div>
        );

      case 'categories':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-3xl font-bold text-white">üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ª–∏–º–∏—Ç—ã</h2>
              <button
                onClick={() => {setEditingItem(null); setModalType('addCategory'); setModalOpen(true);}}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-all duration-200 flex items-center gap-2"
              >
                <span>‚ûï</span>
                <span>–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</span>
              </button>
            </div>
            <div className="grid gap-4">
              {categories.map(category => {
                const spent = transactions
                  .filter(t => t.category === category.name && t.type === 'expense')
                  .reduce((sum, t) => sum + t.amount, 0);
                const progress = category.limit > 0 ? (spent / category.limit) * 100 : 0;
                
                return (
                  <div key={category.id} className="bg-gray-800/50 backdrop-blur-sm p-4 rounded-xl">
                    <div className="flex justify-between items-center mb-2">
                      <h4 className="text-lg font-semibold text-white">{category.name}</h4>
                      <div className="flex items-center gap-3">
                        <span className="text-sm text-gray-300">
                          {(spent || 0).toLocaleString('ru-RU')} / {(category.limit || 0) > 0 ? (category.limit || 0).toLocaleString('ru-RU') : '‚àû'} z≈Ç
                        </span>
                        <button
                          onClick={() => {setEditingItem(category); setModalType('editLimit'); setModalOpen(true);}}
                          className="text-blue-400 hover:text-blue-300 text-sm p-1"
                          title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç"
                        >
                          ‚úèÔ∏è
                        </button>
                      </div>
                    </div>
                    {category.limit > 0 && (
                      <>
                        <div className="w-full bg-gray-700 rounded-full h-2 mb-1">
                          <div 
                            className="h-2 rounded-full transition-all duration-300"
                            style={{ 
                              width: `${Math.min(progress, 100)}%`,
                              backgroundColor: progress > 100 ? '#ef4444' : category.color
                            }}
                          />
                        </div>
                        <div className="text-xs text-gray-400 text-right">
                          {progress.toFixed(0)}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
                        </div>
                      </>
                    )}
                  </div>
                );
              })}
            </div>
          </div>
        );

      case 'analytics':
        return (
          <div className="space-y-6">
            <h2 className="text-3xl font-bold text-white">üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h2>
            
            {/* –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="grid md:grid-cols-2 gap-6">
              <div className="bg-gray-800/50 backdrop-blur-sm p-6 rounded-xl">
                <div className="flex justify-between items-center mb-4">
                  <h4 className="text-lg font-semibold text-white">üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç</h4>
                  <button
                    onClick={fetchExchangeRates}
                    disabled={isLoadingRates}
                    className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white px-3 py-1 rounded text-sm transition-colors"
                    title="–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã"
                  >
                    {isLoadingRates ? '‚è≥' : 'üîÑ'}
                  </button>
                </div>
                <div className="space-y-2">
                  {Object.entries(exchangeRates).map(([currency, rate]) => (
                    <div key={currency} className="flex justify-between text-gray-300">
                      <span>1 {currency}</span>
                      <span>{rate.toFixed(4)} PLN</span>
                    </div>
                  ))}
                </div>
                {lastRateUpdate && (
                  <div className="text-xs text-gray-500 mt-3">
                    –û–±–Ω–æ–≤–ª–µ–Ω–æ: {lastRateUpdate.toLocaleString('ru-RU')}
                  </div>
                )}
              </div>
              
              <div className="bg-gray-800/50 backdrop-blur-sm p-6 rounded-xl">
                <h4 className="text-lg font-semibold text-white mb-4">üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-300">–û–±—â–∏–π –¥–æ—Ö–æ–¥:</span>
                    <span className="text-green-400 font-bold">
                      +{formatCurrency(transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0))}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-300">–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:</span>
                    <span className="text-red-400 font-bold">
                      -{formatCurrency(transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0))}
                    </span>
                  </div>
                  <div className="flex justify-between border-t border-gray-600 pt-2">
                    <span className="text-gray-300">–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:</span>
                    <span className="text-white font-bold">
                      {formatCurrency(Object.values(balances).reduce((sum, balance) => sum + balance, 0))}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-300">–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥/–¥–µ–Ω—å:</span>
                    <span className="text-yellow-400 font-bold">
                      {formatCurrency(
                        transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0) / 
                        Math.max(1, Math.ceil((new Date() - new Date(Math.min(...transactions.map(t => t.date)))) / (1000 * 60 * 60 * 24)))
                      )}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            {/* –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –∫—Ä—É–≥–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã */}
            <div className="grid md:grid-cols-2 gap-6">
              {expensesByCategory.length > 0 && (
                <PieChart 
                  data={expensesByCategory} 
                  title="üìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º" 
                  formatCurrency={formatCurrency}
                />
              )}
              {incomeByUser.length > 0 && (
                <PieChart 
                  data={incomeByUser} 
                  title="üë• –î–æ—Ö–æ–¥—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º" 
                  formatCurrency={formatCurrency}
                />
              )}
            </div>

            {/* –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã */}
            <div className="grid md:grid-cols-2 gap-6">
              <TrendChart 
                transactions={transactions} 
                formatCurrency={formatCurrency}
                title="üìà –¢–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º"
              />
              
              <div className="bg-gray-800/50 backdrop-blur-sm p-6 rounded-xl">
                <h4 className="text-lg font-semibold text-white mb-4">üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã</h4>
                <div className="space-y-4">
                  {(() => {
                    const monthlyExpenses = transactions
                      .filter(t => t.type === 'expense')
                      .reduce((sum, t) => sum + t.amount, 0) / Math.max(1, new Set(transactions.map(t => `${t.date.getFullYear()}-${t.date.getMonth()}`)).size);
                    const totalBalance = Object.values(balances).reduce((sum, balance) => sum + balance, 0);
                    const monthsLeft = totalBalance / Math.max(monthlyExpenses, 1);
                    
                    return (
                      <>
                        <div className="flex justify-between">
                          <span className="text-gray-300">–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥/–º–µ—Å—è—Ü:</span>
                          <span className="text-orange-400 font-bold">
                            {formatCurrency(monthlyExpenses)}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-300">–î–µ–Ω–µ–≥ —Ö–≤–∞—Ç–∏—Ç –Ω–∞:</span>
                          <span className="text-cyan-400 font-bold">
                            {monthsLeft > 12 ? '12+ –º–µ—Å—è—Ü–µ–≤' : `${monthsLeft.toFixed(1)} –º–µ—Å—è—Ü–µ–≤`}
                          </span>
                        </div>
                        <div className="bg-gray-700 rounded-lg p-3 mt-4">
                          <div className="text-xs text-gray-400 mb-1">–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü</div>
                          <div className="text-white">
                            –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {formatCurrency(monthlyExpenses)}
                          </div>
                        </div>
                      </>
                    );
                  })()}
                </div>
              </div>
            </div>
          </div>
        );

      case 'settings':
        return (
          <div className="space-y-6">
            <h2 className="text-3xl font-bold text-white">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
            <div className="bg-gray-800/50 backdrop-blur-sm p-6 rounded-xl">
              <div className="space-y-6">
                <div>
                  <label className="block text-white mb-2 font-medium">–¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</label>
                  <button
                    onClick={toggleTheme}
                    className="bg-gray-700 hover:bg-gray-600 text-white p-3 rounded-lg w-full text-left transition-colors"
                  >
                    {theme === 'dark' ? 'üåô –¢—ë–º–Ω–∞—è —Ç–µ–º–∞' : '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞'}
                  </button>
                </div>
                
                <div>
                  <label className="block text-white mb-2 font-medium">–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞</label>
                  <select 
                    value={selectedCurrency}
                    onChange={(e) => setSelectedCurrency(e.target.value)}
                    className="bg-gray-700 text-white p-3 rounded-lg w-full"
                  >
                    <option value="PLN">Polish Z≈Çoty (z≈Ç)</option>
                    <option value="EUR">Euro (‚Ç¨)</option>
                    <option value="USD">US Dollar ($)</option>
                    <option value="UAH">Ukrainian Hryvnia (‚Ç¥)</option>
                  </select>
                </div>

                <div className="pt-4 border-t border-gray-600">
                  <h4 className="text-white font-medium mb-3">üë• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–º—å–µ</h4>
                  <div className="space-y-3">
                    <div className="bg-gray-700/50 p-3 rounded-lg">
                      <div className="flex justify-between items-center">
                        <span className="text-gray-300">–ö–æ–¥ —Å–µ–º—å–∏:</span>
                        <span className="font-mono text-white">{familyCode}</span>
                      </div>
                    </div>
                    <div className="bg-gray-700/50 p-3 rounded-lg">
                      <div className="flex justify-between items-center">
                        <span className="text-gray-300">–í–∞—à–µ –∏–º—è:</span>
                        <span className="text-white">{userName}</span>
                      </div>
                    </div>
                    <button
                      onClick={disconnectFamily}
                      className="bg-red-600 hover:bg-red-700 text-white p-3 rounded-lg w-full transition-colors"
                    >
                      üö™ –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ–º—å–∏
                    </button>
                  </div>
                </div>

                <div className="pt-4 border-t border-gray-600">
                  <SyncModeSelector 
                    currentMode={syncMode}
                    onModeChange={(mode) => {
                      console.log('–†–µ–∂–∏–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:', mode);
                      setSyncMode(mode);
                      if (mode === 'cloud') {
                        if (firebaseConnected) {
                          showNotification('üî• –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ Firebase! –û–±–ª–∞—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞.', 'success');
                        } else if (firebaseError) {
                          showNotification(`‚ùå –û—à–∏–±–∫–∞ Firebase: ${firebaseError}`, 'error');
                        } else {
                          showNotification('‚ö†Ô∏è Firebase –≤–∫–ª—é—á–µ–Ω, –Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ', 'warning');
                        }
                      } else {
                        showNotification('üì± –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º', 'success');
                      }
                    }}
                  />
                </div>

                {showInstallPrompt && (
                  <div className="pt-4 border-t border-gray-600">
                    <label className="block text-white mb-2 font-medium">–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</label>
                    <button
                      onClick={handleInstallClick}
                      className="bg-green-600 hover:bg-green-700 text-white p-3 rounded-lg w-full text-left transition-colors flex items-center gap-3"
                    >
                      <span>üì±</span>
                      <div>
                        <div>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</div>
                        <div className="text-xs text-green-200">–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø</div>
                      </div>
                    </button>
                  </div>
                )}

                <div className="pt-4 border-t border-gray-600">
                  <h4 className="text-white font-medium mb-3">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</h4>
                  <div className="text-sm text-gray-400 space-y-1">
                    <p>–í–µ—Ä—Å–∏—è: 2.2.0 üî• Real-time Firebase</p>
                    <p>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 6 –æ–∫—Ç—è–±—Ä—è 2025</p>
                    <p>–§—É–Ω–∫—Ü–∏–∏: PWA –≥–æ—Ç–æ–≤, –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );

      default: // dashboard
        return (
          <div className="space-y-8">
            <h1 className={`text-4xl font-bold text-center mb-8 ${theme === 'light' ? 'text-gray-800' : 'text-white'}`}>
              üí∞ –°–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç
            </h1>
            
            <div className="grid md:grid-cols-3 gap-6">
              <BalanceCard 
                user="–ê—Ä—Ç—É—Ä" 
                balance={balanceData.arthur.balance}
                color={balanceData.arthur.color}
                icon={balanceData.arthur.icon}
                transactions={getUserTransactions('arthur')}
                formatCurrency={formatCurrency}
                onEdit={() => {setSelectedUser('arthur'); setModalOpen(true); setModalType('transaction');}}
              />
              <BalanceCard 
                user="–í–∞–ª–µ—Ä–∏—è" 
                balance={balanceData.valeria.balance}
                color={balanceData.valeria.color}
                icon={balanceData.valeria.icon}
                transactions={getUserTransactions('valeria')}
                formatCurrency={formatCurrency}
                onEdit={() => {setSelectedUser('valeria'); setModalOpen(true); setModalType('transaction');}}
              />
              <BalanceCard 
                user="–û–±—â–∏–π –±—é–¥–∂–µ—Ç" 
                balance={balanceData.shared.balance}
                color={balanceData.shared.color}
                icon={balanceData.shared.icon}
                transactions={getUserTransactions('shared')}
                formatCurrency={formatCurrency}
                onEdit={() => {setSelectedUser('shared'); setModalOpen(true); setModalType('transaction');}}
              />
            </div>

            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4">
              <div className="bg-gray-800/50 backdrop-blur-sm p-4 rounded-xl text-center">
                <div className="text-2xl font-bold text-green-400">
                  +{formatCurrency(transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0))}
                </div>
                <div className="text-sm text-gray-300">–î–æ—Ö–æ–¥—ã –≤ –º–µ—Å—è—Ü–µ</div>
              </div>
              <div className="bg-gray-800/50 backdrop-blur-sm p-4 rounded-xl text-center">
                <div className="text-2xl font-bold text-red-400">
                  -{formatCurrency(transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0))}
                </div>
                <div className="text-sm text-gray-300">–†–∞—Å—Ö–æ–¥—ã –≤ –º–µ—Å—è—Ü–µ</div>
              </div>
              <div className="bg-gray-800/50 backdrop-blur-sm p-4 rounded-xl text-center">
                <div className="text-2xl font-bold text-blue-400">
                  {goals.length > 0 ? Math.round(goals.reduce((acc, goal) => acc + (goal.current / goal.target), 0) / goals.length * 100) : 0}%
                </div>
                <div className="text-sm text-gray-300">–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–π</div>
              </div>
              <div className="bg-gray-800/50 backdrop-blur-sm p-4 rounded-xl text-center">
                <div className="text-2xl font-bold text-yellow-400">{transactions.length}</div>
                <div className="text-sm text-gray-300">–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π</div>
              </div>
            </div>

            <div className="bg-gray-800/50 backdrop-blur-sm p-6 rounded-xl">
              <h3 className="text-xl font-bold text-white mb-4">üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</h3>
              <div className="space-y-3">
                {transactions.slice(-5).reverse().map(transaction => (
                  <div key={transaction.id} className="flex justify-between items-center py-2 border-b border-gray-700 last:border-b-0">
                    <div>
                      <div className="text-white">{transaction.description}</div>
                      <div className="text-xs text-gray-400">{transaction.category}</div>
                    </div>
                    <div className={`font-bold ${transaction.type === 'income' ? 'text-green-400' : 'text-red-400'}`}>
                      {transaction.type === 'income' ? '+' : '-'}{formatCurrency(transaction.amount)}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );
    }
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ–º—å–µ
  const FamilyAuthComponent = () => {
    const [mode, setMode] = useState('join'); // 'join' –∏–ª–∏ 'create'
    const [inputCode, setInputCode] = useState('');
    const [inputName, setInputName] = useState('');

    const handleSubmit = (e) => {
      e.preventDefault();
      if (mode === 'create') {
        createFamily(inputName);
      } else {
        if (inputCode.length !== 8) {
          showNotification('–ö–æ–¥ —Å–µ–º—å–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 8 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
          return;
        }
        joinFamily(inputCode, inputName);
      }
    };

    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 flex items-center justify-center p-4">
        <div className="bg-white dark:bg-gray-800 rounded-2xl p-8 w-full max-w-md shadow-xl">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-gray-800 dark:text-white mb-2">
              üí∞ –°–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç
            </h1>
            <p className="text-gray-600 dark:text-gray-300">
              –ê—Ä—Ç—É—Ä –∏ –í–∞–ª–µ—Ä–∏—è
            </p>
          </div>

          <div className="flex gap-2 mb-6">
            <button
              onClick={() => setMode('join')}
              className={`flex-1 py-2 px-4 rounded-lg transition-colors ${
                mode === 'join'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300'
              }`}
            >
              –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            </button>
            <button
              onClick={() => setMode('create')}
              className={`flex-1 py-2 px-4 rounded-lg transition-colors ${
                mode === 'create'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300'
              }`}
            >
              –°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é
            </button>
          </div>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-gray-700 dark:text-gray-300 mb-2">
                –í–∞—à–µ –∏–º—è
              </label>
              <input
                type="text"
                value={inputName}
                onChange={(e) => setInputName(e.target.value)}
                placeholder="–ê—Ä—Ç—É—Ä –∏–ª–∏ –í–∞–ª–µ—Ä–∏—è"
                className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                required
              />
            </div>

            {mode === 'join' && (
              <div>
                <label className="block text-gray-700 dark:text-gray-300 mb-2">
                  –ö–æ–¥ —Å–µ–º—å–∏
                </label>
                <input
                  type="text"
                  value={inputCode}
                  onChange={(e) => setInputCode(e.target.value.toUpperCase())}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: ARVAL123"
                  maxLength={8}
                  className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white font-mono text-center text-lg"
                  required
                />
                <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                  –í–≤–µ–¥–∏—Ç–µ 8-—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥ —Å–µ–º—å–∏
                </div>
              </div>
            )}

            <button
              type="submit"
              className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg transition-colors font-medium"
            >
              {mode === 'create' ? '‚ú® –°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é' : 'üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ–º—å–µ'}
            </button>
          </form>

          {mode === 'create' && (
            <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
              <div className="text-xs text-blue-700 dark:text-blue-300">
                üí° –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–µ–º—å–µ
  if (!isConnectedToFamily) {
    return <FamilyAuthComponent />;
  }

  return (
    <div 
      className={`min-h-screen transition-all duration-300 ${
        theme === 'light' 
          ? 'bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50' 
          : 'bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900'
      }`}
      style={{
        fontFamily: 'Inter, system-ui, sans-serif'
      }}
    >
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        <Navigation 
          activeTab={activeTab} 
          setActiveTab={setActiveTab} 
          theme={theme}
          toggleTheme={toggleTheme}
        />
        
        {renderContent()}
        
        <footer className="mt-12 text-center text-gray-400 text-sm">
          <p>üíù –°–æ–∑–¥–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é –¥–ª—è –ê—Ä—Ç—É—Ä–∞ –∏ –í–∞–ª–µ—Ä–∏–∏</p>
          <p>–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º</p>
        </footer>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      <Modal 
        isOpen={modalOpen} 
        onClose={() => {setModalOpen(false); setSelectedUser('');}}
        theme={theme}
        title={
          modalType === 'transaction' ? '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é' :
          modalType === 'goal' ? '–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å' :
          modalType === 'addMoney' ? '–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∫ —Ü–µ–ª–∏' :
          modalType === 'editLimit' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' :
          modalType === 'addCategory' ? '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é' :
          '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'
        }
      >
        {modalType === 'transaction' && (
          <form onSubmit={(e) => { e.preventDefault(); addTransaction(new FormData(e.target)); }}>
            <div className="space-y-4">
              <div>
                <label className="block text-white mb-2">–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏</label>
                <select name="type" className="w-full bg-gray-700 text-white p-2 rounded" required>
                  <option value="income">–î–æ—Ö–æ–¥</option>
                  <option value="expense">–†–∞—Å—Ö–æ–¥</option>
                </select>
              </div>
              <div>
                <label className="block text-white mb-2">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</label>
                <select name="user" defaultValue={selectedUser} className="w-full bg-gray-700 text-white p-2 rounded" required>
                  <option value="arthur">–ê—Ä—Ç—É—Ä</option>
                  <option value="valeria">–í–∞–ª–µ—Ä–∏—è</option>
                  <option value="shared">–û–±—â–∏–π</option>
                </select>
              </div>
              <div>
                <label className="block text-white mb-2">–°—É–º–º–∞ (z≈Ç)</label>
                <input 
                  type="number" 
                  name="amount" 
                  step="0.01" 
                  className="w-full bg-gray-700 text-white p-2 rounded" 
                  required 
                />
              </div>
              <div>
                <label className="block text-white mb-2">–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                <input 
                  type="text" 
                  name="description" 
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–¥—É–∫—Ç—ã, –ö–∞—Ñ–µ, –ó–∞—Ä–ø–ª–∞—Ç–∞..."
                  className="w-full bg-gray-700 text-white p-2 rounded" 
                />
              </div>
              <div>
                <label className="block text-white mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                <select name="category" className="w-full bg-gray-700 text-white p-2 rounded" required>
                  {categories.map(cat => (
                    <option key={cat.id} value={cat.name}>{cat.name}</option>
                  ))}
                </select>
              </div>
              <button 
                type="submit" 
                className="w-full bg-blue-600 hover:bg-blue-700 text-white p-2 rounded transition-colors"
              >
                –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
              </button>
            </div>
          </form>
        )}

        {modalType === 'goal' && (
          <form onSubmit={(e) => { e.preventDefault(); addGoal(new FormData(e.target)); }}>
            <div className="space-y-4">
              <div>
                <label className="block text-white mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏</label>
                <input 
                  type="text" 
                  name="title" 
                  className="w-full bg-gray-700 text-white p-2 rounded" 
                  required 
                />
              </div>
              <div>
                <label className="block text-white mb-2">–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞</label>
                <input 
                  type="number" 
                  name="target" 
                  step="0.01" 
                  className="w-full bg-gray-700 text-white p-2 rounded" 
                  required 
                />
              </div>
              <div>
                <label className="block text-white mb-2">–î–µ–¥–ª–∞–π–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                <input 
                  type="date" 
                  name="deadline" 
                  min={new Date().toISOString().split('T')[0]}
                  className="w-full bg-gray-700 text-white p-2 rounded" 
                />
                <div className="text-xs text-gray-400 mt-1">
                  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
                </div>
              </div>
              <button 
                type="submit" 
                className="w-full bg-blue-600 hover:bg-blue-700 text-white p-2 rounded transition-colors"
              >
                –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å
              </button>
            </div>
          </form>
        )}

        {modalType === 'addMoney' && editingItem && (
          <form onSubmit={(e) => { 
            e.preventDefault(); 
            const amount = parseFloat(new FormData(e.target).get('amount')); 
            addMoneyToGoal(editingItem.id, amount); 
          }}>
            <div className="space-y-4">
              <div>
                <label className="block text-white mb-2">–¶–µ–ª—å: {editingItem.title}</label>
                <div className="text-sm text-gray-400">
                  –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {(editingItem.current || 0).toLocaleString('ru-RU')} / {(editingItem.target || 0).toLocaleString('ru-RU')} z≈Ç
                </div>
              </div>
              <div>
                <label className="block text-white mb-2">–°—É–º–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (z≈Ç)</label>
                <input 
                  type="number" 
                  name="amount" 
                  step="0.01" 
                  max={editingItem.target - editingItem.current}
                  className="w-full bg-gray-700 text-white p-2 rounded" 
                  required 
                />
              </div>
              <button 
                type="submit" 
                className="w-full bg-green-600 hover:bg-green-700 text-white p-2 rounded transition-colors"
              >
                –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏
              </button>
            </div>
          </form>
        )}

        {modalType === 'editLimit' && editingItem && (
          <form onSubmit={(e) => { 
            e.preventDefault(); 
            const newLimit = parseFloat(new FormData(e.target).get('limit')); 
            editCategoryLimit(editingItem.id, newLimit); 
          }}>
            <div className="space-y-4">
              <div>
                <label className="block text-white mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {editingItem.name}</label>
                <div className="text-sm text-gray-400">
                  –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {(editingItem.limit || 0) > 0 ? (editingItem.limit || 0).toLocaleString('ru-RU') : '‚àû'} z≈Ç
                </div>
              </div>
              <div>
                <label className="block text-white mb-2">–ù–æ–≤—ã–π –ª–∏–º–∏—Ç (z≈Ç)</label>
                <input 
                  type="number" 
                  name="limit" 
                  step="0.01" 
                  min="0"
                  defaultValue={editingItem.limit}
                  className="w-full bg-gray-700 text-white p-2 rounded" 
                  required 
                />
                <div className="text-xs text-gray-400 mt-1">
                  –í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
                </div>
              </div>
              <button 
                type="submit" 
                className="w-full bg-blue-600 hover:bg-blue-700 text-white p-2 rounded transition-colors"
              >
                –û–±–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç
              </button>
            </div>
          </form>
        )}

        {modalType === 'addCategory' && (
          <form onSubmit={(e) => { e.preventDefault(); addCategory(new FormData(e.target)); }}>
            <div className="space-y-4">
              <div>
                <label className="block text-white mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</label>
                <input 
                  type="text" 
                  name="name" 
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ó–¥–æ—Ä–æ–≤—å–µ, –•–æ–±–±–∏, –ü–æ–¥–∞—Ä–∫–∏..."
                  className="w-full bg-gray-700 text-white p-2 rounded" 
                  required 
                />
              </div>
              <div>
                <label className="block text-white mb-2">–õ–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ (z≈Ç)</label>
                <input 
                  type="number" 
                  name="limit" 
                  step="0.01" 
                  min="0"
                  defaultValue="0"
                  className="w-full bg-gray-700 text-white p-2 rounded" 
                />
                <div className="text-xs text-gray-400 mt-1">
                  –í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
                </div>
              </div>
              <button 
                type="submit" 
                className="w-full bg-green-600 hover:bg-green-700 text-white p-2 rounded transition-colors"
              >
                –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
              </button>
            </div>
          </form>
        )}
      </Modal>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      {notification && (
        <Notification 
          message={notification.message}
          type={notification.type}
          onClose={() => setNotification(null)}
        />
      )}
    </div>
  );
}

export default App;