// Firebase Service –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Firestore
import { 
  collection, 
  doc, 
  getDoc, 
  setDoc, 
  addDoc, 
  updateDoc, 
  deleteDoc, 
  query, 
  orderBy, 
  onSnapshot, 
  serverTimestamp,
  getDocs
} from 'firebase/firestore';
import { db } from './firebase/config.js';

// –°–µ–º—å–∏
export const createFamily = async (familyCode, familyName, createdBy) => {
  try {
    const familyRef = doc(db, 'families', familyCode);
    
    await setDoc(familyRef, {
      familyCode,
      familyName,
      createdBy,
      createdAt: serverTimestamp(),
      members: [createdBy],
      balances: {
        arthur: 2450,
        valeria: 1890,
        shared: 5670
      }
    });
    
    return { success: true, familyCode };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏:', error);
    return { success: false, error: error.message };
  }
};

export const joinFamily = async (familyCode, memberName) => {
  try {
    const familyRef = doc(db, 'families', familyCode);
    const familyDoc = await getDoc(familyRef);
    
    if (!familyDoc.exists()) {
      return { success: false, error: '–°–µ–º—å—è —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }
    
    const familyData = familyDoc.data();
    if (familyData.members.includes(memberName)) {
      return { success: true, family: familyData };
    }
    
    await updateDoc(familyRef, {
      members: [...familyData.members, memberName]
    });
    
    return { success: true, family: { ...familyData, members: [...familyData.members, memberName] } };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ–º—å–µ:', error);
    return { success: false, error: error.message };
  }
};

// –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
export const addTransaction = async (familyCode, transaction) => {
  try {
    const transactionRef = collection(db, 'families', familyCode, 'transactions');
    const docRef = await addDoc(transactionRef, {
      ...transaction,
      createdAt: serverTimestamp()
    });
    return { success: true, id: docRef.id };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    return { success: false, error: error.message };
  }
};

export const getTransactions = async (familyCode) => {
  try {
    const transactionRef = collection(db, 'families', familyCode, 'transactions');
    const q = query(transactionRef, orderBy('createdAt', 'desc'));
    const querySnapshot = await getDocs(q);
    
    const transactions = [];
    querySnapshot.forEach((doc) => {
      transactions.push({ id: doc.id, ...doc.data() });
    });
    
    return { success: true, transactions };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    return { success: false, error: error.message };
  }
};

export const updateTransaction = async (familyCode, transactionId, updates) => {
  try {
    const transactionRef = doc(db, 'families', familyCode, 'transactions', transactionId);
    await updateDoc(transactionRef, updates);
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    return { success: false, error: error.message };
  }
};

export const deleteTransaction = async (familyCode, transactionId) => {
  console.log('üî• Firebase deleteTransaction –≤—ã–∑–≤–∞–Ω–∞:', { familyCode, transactionId });
  try {
    const transactionRef = doc(db, 'families', familyCode, 'transactions', transactionId);
    console.log('üìÑ –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', transactionRef.path);
    
    await deleteDoc(transactionRef);
    console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ Firebase');
    
    return { success: true };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ Firebase:', error);
    return { success: false, error: error.message };
  }
};

// –¶–µ–ª–∏
export const addGoal = async (familyCode, goal) => {
  try {
    const goalRef = collection(db, 'families', familyCode, 'goals');
    const docRef = await addDoc(goalRef, {
      ...goal,
      createdAt: serverTimestamp()
    });
    return { success: true, id: docRef.id };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏:', error);
    return { success: false, error: error.message };
  }
};

export const getGoals = async (familyCode) => {
  try {
    const goalRef = collection(db, 'families', familyCode, 'goals');
    const querySnapshot = await getDocs(goalRef);
    
    const goals = [];
    querySnapshot.forEach((doc) => {
      goals.push({ id: doc.id, ...doc.data() });
    });
    
    return { success: true, goals };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–µ–π:', error);
    return { success: false, error: error.message };
  }
};

export const updateGoal = async (familyCode, goalId, updates) => {
  try {
    const goalRef = doc(db, 'families', familyCode, 'goals', goalId);
    await updateDoc(goalRef, updates);
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏:', error);
    return { success: false, error: error.message };
  }
};

export const deleteGoal = async (familyCode, goalId) => {
  try {
    const goalRef = doc(db, 'families', familyCode, 'goals', goalId);
    await deleteDoc(goalRef);
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏:', error);
    return { success: false, error: error.message };
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å–µ–º—å–∏
export const updateFamilyBalances = async (familyCode, balances) => {
  try {
    const familyRef = doc(db, 'families', familyCode);
    await updateDoc(familyRef, { balances });
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    return { success: false, error: error.message };
  }
};

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
export const subscribeToFamilyData = (familyCode, callback) => {
  const familyRef = doc(db, 'families', familyCode);
  return onSnapshot(familyRef, (doc) => {
    if (doc.exists()) {
      callback({ success: true, family: doc.data() });
    } else {
      callback({ success: false, error: '–°–µ–º—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
  });
};

export const subscribeToTransactions = (familyCode, callback) => {
  console.log('üîî –°–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Å–µ–º—å–∏:', familyCode);
  const transactionRef = collection(db, 'families', familyCode, 'transactions');
  const q = query(transactionRef, orderBy('createdAt', 'desc'));
  
  return onSnapshot(q, (querySnapshot) => {
    console.log('üì° Firebase –ø–æ–¥–ø–∏—Å–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, —Ä–∞–∑–º–µ—Ä —Å–Ω–∞–ø—à–æ—Ç–∞:', querySnapshot.size);
    const transactions = [];
    
    querySnapshot.forEach((doc) => {
      const transaction = { id: doc.id, ...doc.data() };
      console.log('üìÑ –î–æ–∫—É–º–µ–Ω—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transaction);
      transactions.push(transaction);
    });
    
    console.log('üìä –ò—Ç–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ callback:', transactions.length);
    console.log('üÜî ID –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transactions.map(t => t.id));
    
    callback({ success: true, transactions });
  }, (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    callback({ success: false, error: error.message, transactions: [] });
  });
};

export const subscribeToGoals = (familyCode, callback) => {
  const goalRef = collection(db, 'families', familyCode, 'goals');
  
  return onSnapshot(goalRef, (querySnapshot) => {
    const goals = [];
    querySnapshot.forEach((doc) => {
      goals.push({ id: doc.id, ...doc.data() });
    });
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–π –∏–∑ Firebase:', goals.length);
    callback({ success: true, goals });
  }, (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ü–µ–ª–∏:', error);
    callback({ success: false, error: error.message, goals: [] });
  });
};